Module to manage Star Rating.

REACT
=================
App.js
-------
import React, { useState } from 'react';
import './App.css';

const App = () => {
  const [stars, setStars] = useState(
    Array.from([1, 2, 3, 4, 5], (id) => ({ id: id, filled: false }))
  );
  const [rating, setRating] = useState(0);

  const clickHandler = (id) => {
    setStars((stars) =>
      stars.map((star) => ({ ...star, filled: star.id <= id }))
    );
    setRating(id);
  };

  const onHover = (id) => {
    setStars((stars) =>
      stars.map((star) => ({ ...star, filled: star.id <= id }))
    );
  };

  const onOut = () => {
    setStars((stars) => stars.map((star) => ({ ...star, filled: false })));
  };

  return (
    <div>
      {stars.map((star) => (
        <span
          key={star.id}
          onClick={!rating ? () => clickHandler(star.id) : undefined}
          onMouseOver={!rating ? () => onHover(star.id) : undefined}
          onMouseOut={!rating ? () => onOut() : undefined}
          className={`star ${star.filled ? 'active' : ''}`}
        >
          ★
        </span>
      ))}
      {rating ? <p>Thanks for your feedback!</p> : null}
    </div>
  );
};

export default App;

App.css
-----------------
.star {
  cursor: pointer;
  font-size: 5em;
  color: lightgray;
  transition: color 0.2s;
}

.star.active {
  color: gold;
}

.star.hover {
  color: gold;
}

.error {
  color: red;
}


=======================


Vanila.JS

Html
----
<div>
  <span id="1" class="star">★</span>
  <span id="2" class="star">★</span>
  <span id="3" class="star">★</span>
  <span id="4" class="star">★</span>
  <span id="5" class="star">★</span>
  <p id="message"></p>
  <button id="clear-btn">
  Clear
  </button>
</div>

CSS
----
.star{
  font-size: 5rem;
  color: lightgray;
  cursor: pointer;
}

.star.active{
  color: gold;
}

JS
---
const stars = document.querySelectorAll(".star");
const message = document.getElementById("message");
const clearBtn = document.getElementById("clear-btn");

stars.forEach(star => {
	star.addEventListener("click", ()=>handleClick(star.id));
	star.addEventListener("mouseover", ()=>handleHover(star.id));
	star.addEventListener("mouseout", ()=>clear());
})

clearBtn.addEventListener('click', ()=>{
	message.innerHTML = "";
  clear();
})

function handleHover(id){
	if(message.innerHTML) return;
  
  stars.forEach(star => {
  	if(star.id <= id){
    	star.classList.add("active");
    }
  });
};

function clear(force=false){
	if(message.innerHTML) return;
  
  stars.forEach(star => {
    star.classList.remove("active");
  });
}

function handleClick(id){
	if(message.innerHTML) return;

	stars.forEach(star => {
  	if(star.id <= id){
    	star.classList.add("active");
    }
  });
  
  message.innerHTML = "Thanks for your Review!"
}
